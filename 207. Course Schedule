// method 1
class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
    if(prerequisites == null){
        throw new IllegalArgumentException("illegal prerequisites array");
    }
 
    int len = prerequisites.length;
 
    if(numCourses == 0 || len == 0){
        return true;
    }
 
    int[] visit = new int[numCourses];
 
    HashMap<Integer,ArrayList<Integer>> map = new HashMap<Integer,ArrayList<Integer>>();
    for(int[] a: prerequisites){
        if(map.containsKey(a[1])){
            map.get(a[1]).add(a[0]);
        }else{
            ArrayList<Integer> l = new ArrayList<Integer>();
            l.add(a[0]);
            map.put(a[1], l);
        }
    }
 
    for(int i=0; i<numCourses; i++){
        if(!canFinishDFS(map, visit, i))
            return false;
    }
 
    return true;
}
 
private boolean canFinishDFS(HashMap<Integer,ArrayList<Integer>> map, int[] visit, int i){
    if(visit[i]==-1) 
        return false;
    if(visit[i]==1) 
        return true;
 
    visit[i]=-1;
    if(map.containsKey(i)){
        for(int j: map.get(i)){
            if(!canFinishDFS(map, visit, j)) 
                return false;
        }
    }
 
    visit[i]=1;
 
    return true;
}
}


// method 2:
class Solution {
    
    private enum Status {
        INITIAL, PROCESSING, DONE;
    }
    
    private static class V {
        public int label;
        public List<Integer> nexts;
        public Status status;
        public V(int label) {
            this.label = label;
            this.nexts = new ArrayList<Integer>();
            status = Status.INITIAL;
        }
    }
    
    public boolean canFinish(int numCourses, int[][] prerequisities) {
        V[] array = new V[numCourses];
        
        for(int i=0; i<numCourses; i++) {
            array[i] = new V(i);
        }
        
        int row = prerequisities.length;
        
        for(int i=0; i<row; i++) {
            int prev = prerequisities[i][1];
            int next = prerequisities[i][0];
            array[prev].nexts.add(next);
        }
        
        for(int i = 0; i<numCourses; i++) {
            if(isCycled(array[i], array))
                return false;
        }
        
        return true;
}
    
 public boolean isCycled(V source, V[] array) {
     if(source.status == Status.DONE) return false;
     
     if(source.status == Status.PROCESSING) return true;
     
     source.status = Status.PROCESSING;
     
     for(int i : source.nexts) {
         if(isCycled(array[i], array))
             return true;
     }
     
     source.status = Status.DONE;
     return false;
 }   
}
// time: V+E (numsCourse + prerequsite.length);
